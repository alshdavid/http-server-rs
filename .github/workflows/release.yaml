name: Release

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on: 
  push:
    branches:
      - "main"

env:
  JUST_VERSION: "1.38.0"

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: source ./.github/setup/just/install.bash
      - run: source ./.github/setup/rust/install.bash
      - run: just test
        
  format:
    name: 📝 Format
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: source ./.github/setup/just/install.bash
      - run: source ./.github/setup/rust/install.bash
      - run: just fmt
        
  lint:
    name: 🤓 Lint
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: source ./.github/setup/just/install.bash
      - run: source ./.github/setup/rust/install.bash
      - run: just lint

  build:
    strategy:
      matrix:
        config:
          - name: 🐥 Linux AMD64
            os: linux
            arch: amd64
            runner: ubuntu-24.04
            rustup_target: x86_64-unknown-linux-gnu
              
          - name: 🐥 Linux ARM64
            os: linux
            arch: arm64
            runner: ubuntu-24.04-arm
            rustup_target: aarch64-unknown-linux-gnu
              
          - name: 🍎 MacOS AMD64
            os: macos
            arch: amd64
            runner: macos-13
            rustup_target: x86_64-apple-darwin
              
          - name: 🍎 MacOS ARM64
            os: macos
            arch: arm64
            runner: macos-15
            rustup_target: aarch64-apple-darwin
              
          - name: 🟦 Windows AMD64
            os: windows
            arch: amd64
            runner: windows-latest
            rustup_target: x86_64-pc-windows-msvc
              
          - name: 🟦 Windows ARM64
            os: windows
            arch: arm64
            runner: windows-latest
            rustup_target: aarch64-pc-windows-msvc

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.runner }}
    steps:
      - uses: actions/checkout@v4
      # Dependencies Unix
      - if: runner.os != 'Windows'
        run: source ./.github/setup/just/install.bash
      - if: runner.os != 'Windows'
        run: |
          source ./.github/setup/rust/install.bash
          rustup target add ${{ matrix.config.rustup_target }}
      # Dependencies Windows
      - if: runner.os == 'Windows'
        run: uname -s
      - if: runner.os == 'Windows'
        run: . ./.github/setup/just/install.ps1
      - if: runner.os == 'Windows'
        run: |
          . ./.github/setup/rust/install.ps1
          rustup target add ${{ matrix.config.rustup_target }}
      # Build
      - env: { os: "${{ matrix.config.os }}", arch: "${{ matrix.config.arch }}", profile: "release" }
        run: just build
      - uses: actions/upload-artifact@v4
        with:
          name: http-server-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: ${{ github.workspace }}/target/${{ matrix.config.os }}-${{ matrix.config.arch }}/**/*
          if-no-files-found: error
          retention-days: 1

  publish-github-release:
    name: "🔄 Publish Github Release"
    runs-on: ubuntu-24.04
    needs: 
      - test
      - format
      - lint
      - build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { path: artifacts }
      - name: Publish` Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          TAG="$(date -u +"v%Y.%m.%d.%H%M").${GITHUB_SHA::4}"
          echo "Tag: ${TAG}"
          
          gh release create $TAG  --draft --notes "Automatically built binaries"
          gh release edit $TAG --title "🚀 Latest"

          cd artifacts

          for name in *; do
            cd "${{ github.workspace }}/artifacts/${name}/release"
            tar -czvf ./${name}.tar.gz ./*
            gh release upload $TAG ${name}.tar.gz
          done
         
          gh release edit $TAG --draft=false
