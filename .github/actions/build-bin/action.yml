name: 'alshdavid/build'
description: "Build Project"

inputs:
  os:
    description: 'target operating system'
    default: ${{ runner.os == 'Linux' && 'linux' || runner.os == 'macOS' && 'macos' || runner.os == 'Windows' && 'windows' }}
  arch:
    description: 'target CPU architecture'
    default: ${{ runner.arch == 'ARM64' && 'arm64' || runner.arch == 'X64' && 'amd64' }}
  profile:
    description: 'Build profile'
    default: "release"

runs:
  using: 'composite'
  steps:
    - name: "Build Bin"
      if: |
        (runner.os == 'Linux' && runner.arch == 'X64' && 
          inputs.os == 'linux' && inputs.arch == 'amd64') ||
        
        (runner.os == 'Linux' && runner.arch == 'ARM64' && 
          inputs.os == 'linux' && inputs.arch == 'arm64') ||
        
        (runner.os == 'macOS' && runner.arch == 'X64' && 
          inputs.os == 'macos' && inputs.arch == 'amd64') ||
        
        (runner.os == 'macOS' && runner.arch == 'ARM64' && 
          inputs.os == 'macos' && inputs.arch == 'arm64')
      shell: bash
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
        profile: "${{inputs.profile}}"
      run: |
        source .github/actions/setup-env/setup-env.bash
        bash .github/actions/build-bin/build.bash
    
    - name: "Build Bin - Windows"
      if: |
        (runner.os == 'Windows' && runner.arch == 'X64' && 
          inputs.os == 'windows' && inputs.arch == 'amd64') ||
        
        (runner.os == 'Windows' && runner.arch == 'ARM64' && 
          inputs.os == 'windows' && inputs.arch == 'arm64')
      shell: powershell
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
        profile: "${{inputs.profile}}"
      run: |
        . .github/actions/setup-env/setup-env.ps1
        . .github/actions/build-bin/build.ps1

    - name: "Build Bin - Windows arm64 (Cross build on amd64)" 
      if: |
        (runner.os == 'Windows' && runner.arch == 'X64' && 
          inputs.os == 'windows' && inputs.arch == 'arm64')
      shell: powershell
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
        profile: "${{inputs.profile}}"
      run: |
        . .github/actions/setup-env/setup-env.ps1
        rustup target add aarch64-pc-windows-msvc
        . .github/actions/build-bin/build.ps1

    # Copy Artifacts
    - name: "Copy Artifacts (Unix)"
      if: runner.os != 'Windows'
      shell: bash
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
      run: |
        source .github/actions/setup-env/setup-env.bash

        export ROOT_DIR="$(pwd)"
        export JOB_NAME="${os}-${arch}"

        mkdir $ROOT_DIR/artifacts
        cd $ROOT_DIR/target/$JOB_NAME

        mv release http-server
        tar -czvf http-server-$JOB_NAME.tar.gz http-server
        mv http-server-$JOB_NAME.tar.gz $ROOT_DIR/artifacts

        ls -l $ROOT_DIR/artifacts 

    - name: "Copy Files (Windows)"
      if: runner.os == 'Windows'
      shell: powershell
      env:
        os: "${{inputs.os}}"
        arch: "${{inputs.arch}}"
      run: |
        . .github/actions/setup-env/setup-env.ps1

        $env:RootPath = (Get-Location).Path
        $env:Job = "${env:os}-${env:arch}"

        New-Item -ItemType "directory" -Force -Path "${env:RootPath}/artifacts"

        echo "${env:RootPath}/target/${env:Job}"
        cd "${env:RootPath}/target/${env:Job}"
        mv release http-server
        tar -czvf "http-server-${env:Job}.tar.gz" http-server
        Move-Item "http-server-${env:Job}.tar.gz" -Destination "${env:RootPath}/artifacts"
